{
  "name": "pubsubjs",
  "version": "0.3.2",
  "main": "./pubsub.js",
  "dependencies": {},
  "ignore": [
    "test/",
    "sample/",
    "node_modules/"
  ],
  "gitHead": "b0e0dbbb013bcfcc249afc938858de782f1ad6f1",
  "readme": "PubsubJS\n===\n\n[![build status](https://secure.travis-ci.org/nazomikan/PubsubJS.png)](http://travis-ci.org/nazomikan/PubsubJS)\n\n## Description\n\npubsubjs is Micro pubsub library which provides the observer pattern to JavaScript.\n\nIt works in the browser and server (Node).\n\n\n## Usage\n\nIn browser DownLoad pubsub.js,\nor install via bower\n\n    $ bower install pubsubjs\n\nand then include single JavaScript file:\n\n    <script type=\"text/javascript\" src=\"pubsub.js\"></script>\n    <script type=\"text/javascript\">\n        var pubsub = Pubsub.create();\n        ...\n    </script>\n\nOn server install PubsubJS via npm first:\n\n    npm install pubsubjs\n\nand then include it in your project with:\n\n    var pubsub = require('pubsubjs').create();\n\n##What is Pubsub\n\n>Publish–subscribe is a messaging pattern where senders of messages, called publishers, do not program the messages to be sent directly to specific receivers, called subscribers. Published messages are characterized into classes, without knowledge of what, if any, subscribers there may be. Subscribers express interest in one or more classes, and only receives messages that are of interest, without knowledge of what, if any, publishers there are.\n\n>http://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern\n\n\n\n##Example Usage\n\n###pubsub#publish / pubsub#subscribe\n\nFor example, \"The display of notifications and mail to desktop when mail arrives\" can be written using PubsubJS as follows.\n\n    // Define the global subscriber use of pubsubjs\n    pubsub.subscribe('mail.arrived', function (context, mailId) {\n        mailer.display(mailId);\n    });\n\n    pubsub.subscribe('mail.arrived', function (context, mailId) {\n        desktop.notice('a mail has arrived');\n    });\n\n    mailer.polling({\n        onArrived: function (mailId) {\n            pubsub.publish('mail.arrived', null, mailId);\n        },\n        …\n    });\n\n\nAlso, you may want to think subscriber publish as below.\n\n    pubsub.subscribe('mail.arrived', function (context, mailId) {\n        mailer.display(mailId);\n        pubsub.publish('mail.displayed'); // call 'mail.displayed' subscribers\n    });\n\n    pubsub.subscribe('mail.arrived', function (context, mailId) {\n        desktop.notice('a mail has arrived');\n        pubsub.publish('descktop.noticed'); // call 'desktop.noticed' subscribers\n    });\n\n    mailer.polling({\n        onArrived: function (mailId) {\n            pubsub.publish('mail.arrived', null, mailId);\n        },\n        …\n    });\n\n\n###pubsub#subscribeOnce\nWhen are notified first and a subscriber is performed.\nIt is realizable by using `subscribeOnce`.\n\n    var pubsub = PubSub.create()\n      , actual = {a: 0}\n      ;\n\n    pubsub.subscribeOnce('once', function () {\n      actual.a += 1;\n    });\n    pubsub.publish('once');\n    pubsub.publish('once');\n    assert.strictEqual(1, actual.a); // pass\n\n###pubsub#unsubscribe\nYou may think that you would like to remove subscriber at the time of some conditions. \nIt is realizable by using `unsubscribe`.\n\n    var pubsub = PubSub.create()\n      , actual = {a: 0}\n      ;\n\n    var fn = function () {\n      actual.a += 1;\n      if (actual.a > 1) {\n        pubsub.unsubscribe('once', fn);\n      }\n    };\n\n    pubsub.subscribe('event', fn);\n    pubsub.publish('event');\n    pubsub.publish('event');\n    pubsub.publish('event');\n    assert.strictEqual(2, actual.a); // pass\n\n\n###pubsub#Context\npubsub#Context is the most useful API in this library.\nIt is a bit more complex cases, there will often suffer from following situation.\n\n    // in jQuery\n    pubsub.subscribe('favorite.add', function (context, id) {\n        $.ajax({\n            url: xxx,\n            data: {id: id}\n        }).done(function () {\n            // Can not access the $(evt.currentTarget) here.\n        });\n    });\n\n    $(favoriteIcon).bind('click', function (evt) {\n        var id = $(evt.currentTarget).data('id');\n        pubsub.publish('favorite.add', null, id);\n        // want to change the class when \"favorite.add\" is completed.\n        // ex. $(evt.currentTarget).addClass('is-added');\n        // However, since the processing of \"favorite.add\" is async,\n        // I can not write it here.\n    });\n\nThis can be solved by using the pubsub#Context.\n\n    // in jQuery\n    pubsub.subscribe('favorite.add', function (context, id) {\n        $.ajax({\n            url: xxx,\n            data: {id: id}\n        }).done(function () {\n            context.publish('favorite.added');\n        });\n    });\n\n    $(favoriteIcon).bind('click', function (evt) {\n        var target = $(evt.currentTarget),\n            id = target.data('id'),\n            localContext = pubsub.Context.create();\n\n        localContext.subscribe('favorite.added', function (context) {\n            target.addClass('is-added');\n        });\n\n        pubsub.publish('favorite.add', localContext, id);\n    });\n\n\n##All API\n * Pubsub#create()\n * pubsub#publish(eventName, context/null, arg1, arg2...)\n * pubsub#subscribe(eventName, handler)\n * pubsub#subscribeOnce(eventName, handler)\n * pubsub#unsubscribe(eventName, [handler])\n * pubsub#globalContext\n * pubsub#Context\n * Context#create()\n * context#publish(eventName, context/null, arg1, arg2...)\n * context#subscribe(eventName, handler)\n * context#subscribeOnce(eventName, handler)\n * context#unsubscribe(eventName, [handler])\n\n\n##Contributors\n\n* [@nazomikan](http://github.com/nazomikan)\n\n##License:\n<pre>\n(The MIT License)\n\nCopyright (c) 2013 nazomikan\nhttps://github.com/nazomikan/PubsubJS\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n</pre>\n\n",
  "readmeFilename": "README.md",
  "_id": "pubsubjs@0.3.2",
  "description": "PubsubJS ===",
  "repository": {
    "type": "git",
    "url": "git://github.com/nazomikan/PubsubJS.git"
  }
}